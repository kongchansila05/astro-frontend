---
/**
 * SEO.astro â€” Reusable SEO & Open Graph meta component
 * Works for Facebook & Telegram (OG tags), plus Twitter.
 */

interface Props {
  title: string
  description?: string
  /** Absolute URL preferred; falls back to Astro.site */
  url?: string
  /** A single image URL or multiple (Telegram/Facebook will use the first) */
  image?: string | string[]
  /** Open Graph type */
  type?: 'website' | 'article' | 'video.other' | string
  /** e.g., "en_US", "km_KH" */
  locale?: string
  siteName?: string
  /** e.g., "index,follow" or "noindex,nofollow" */
  robots?: string
  /** For article-type pages */
  publishedTime?: string  // ISO 8601
  modifiedTime?: string   // ISO 8601
  section?: string
  tags?: string[]

  /** Twitter */
  twitterCard?: 'summary' | 'summary_large_image'
  twitterSite?: string   // e.g., '@yourhandle'

  /** Canonical override (if different from url) */
  canonical?: string

  /** Optional extra JSON-LD to embed */
  jsonLd?: Record<string, any>

  /** Optional explicit image size (helps FB scraper) */
  ogImageWidth?: number
  ogImageHeight?: number
}

const {
  title,
  description = '',
  url,
  image,
  type = 'website',
  locale = 'en_US',
  siteName = 'My Astro Site',
  robots = 'index,follow',
  publishedTime,
  modifiedTime,
  section,
  tags = [],
  twitterCard,
  twitterSite,
  canonical,
  jsonLd,
  ogImageWidth,
  ogImageHeight,
} = Astro.props as Props

// Helpers
const siteBase = Astro.site?.toString() ?? ''
const ensureAbs = (u?: string) => {
  if (!u) return undefined
  return /^https?:\/\//i.test(u) ? u : (siteBase ? new URL(u, siteBase).toString() : u)
}

const pageUrl = ensureAbs(url) ?? siteBase
const canonicalUrl = ensureAbs(canonical ?? url) ?? siteBase

const images = Array.isArray(image) ? image : (image ? [image] : [])
const absImages = images.map(ensureAbs).filter(Boolean) as string[]

// JSON-LD builder (Article vs WebPage)
const baseLd: Record<string, any> = {
  '@context': 'https://schema.org',
  '@type': type === 'article' ? 'Article' : 'WebPage',
  headline: title,
  description,
  url: pageUrl,
  inLanguage: locale.replace('_', '-'),
  image: absImages.length === 1 ? absImages[0] : absImages,
}
if (type === 'article') {
  if (publishedTime) baseLd.datePublished = publishedTime
  if (modifiedTime) baseLd.dateModified = modifiedTime
  if (section) baseLd.articleSection = section
  if (tags?.length) baseLd.keywords = tags.join(', ')
}
if (siteName) baseLd.isPartOf = { '@type': 'WebSite', name: siteName, url: siteBase || pageUrl }

// Merge custom JSON-LD
const mergedLd = jsonLd ? { ...baseLd, ...jsonLd } : baseLd

// Twitter card default: use large image if we have an image
const resolvedTwitterCard: 'summary' | 'summary_large_image' =
  twitterCard ?? (absImages.length ? 'summary_large_image' : 'summary')
---

<!-- Primary -->
<title>{title}</title>
<meta name="description" content={description} />
<meta name="robots" content={robots} />
{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}

<!-- Open Graph (Facebook/Telegram) -->
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content={type} />
{pageUrl && <meta property="og:url" content={pageUrl} />}
<meta property="og:site_name" content={siteName} />
<meta property="og:locale" content={locale} />
{absImages.map((img) => (
  <>
    <meta property="og:image" content={img} />
    <meta property="og:image:secure_url" content={img} />
    {ogImageWidth && <meta property="og:image:width" content={String(ogImageWidth)} />}
    {ogImageHeight && <meta property="og:image:height" content={String(ogImageHeight)} />}
  </>
))}
{publishedTime && <meta property="article:published_time" content={publishedTime} />}
{modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
{section && <meta property="article:section" content={section} />}
{tags.map((t) => <meta property="article:tag" content={t} />)}

<!-- Twitter (nice to have; Telegram ignores) -->
<meta name="twitter:card" content={resolvedTwitterCard} />
{twitterSite && <meta name="twitter:site" content={twitterSite} />}
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
{absImages[0] && <meta name="twitter:image" content={absImages[0]} />}

<!-- Structured Data -->
<script type="application/ld+json">
  {JSON.stringify(mergedLd)}
</script>
